import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, MetaData
from sqlalchemy.orm import sessionmaker, declarative_base

# ==========================
# üß© –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==========================
load_dotenv()

PG_HOST = os.getenv("PG_HOST")
PG_PORT = os.getenv("PG_PORT")
PG_DB = os.getenv("PG_DB")
PG_USER = os.getenv("PG_USER")
PG_PASSWORD = os.getenv("PG_PASSWORD")
PG_SCHEMA = os.getenv("PG_SCHEMA", "public")

# ==========================
# üß† –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# ==========================
DATABASE_URL = f"postgresql://{PG_USER}:{PG_PASSWORD}@{PG_HOST}:{PG_PORT}/{PG_DB}"

# ==========================
# ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy
# ==========================
engine = create_engine(DATABASE_URL, echo=False)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
metadata = MetaData(schema=PG_SCHEMA)
Base = declarative_base(metadata=metadata)

SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)

# ==========================
# üß± –ü—Ä–∏–º–µ—Ä ORM –º–æ–¥–µ–ª–µ–π
# ==========================
from sqlalchemy import Column, Integer, String, Float, DateTime, JSON

class MarketOHLC(Base):
    __tablename__ = "market_ohlc"

    id = Column(Integer, primary_key=True, autoincrement=True)
    symbol = Column(String, index=True)
    datetime = Column(DateTime, index=True)
    open = Column(Float)
    high = Column(Float)
    low = Column(Float)
    close = Column(Float)
    volume = Column(Float)


class FundamentalData(Base):
    __tablename__ = "fundamental_data"

    id = Column(Integer, primary_key=True, autoincrement=True)
    symbol = Column(String, index=True)
    report_date = Column(DateTime, index=True)
    pe_ratio = Column(Float)
    pb_ratio = Column(Float)
    ev_ebitda = Column(Float)
    fcf_yield = Column(Float)
    dividend_yield = Column(Float)
    eps = Column(Float)
    roe = Column(Float)
    roa = Column(Float)
    gross_margin = Column(Float)
    operating_margin = Column(Float)
    net_margin = Column(Float)
    raw_json = Column(JSON)


class ExperimentRegistry(Base):
    __tablename__ = "experiments"

    id = Column(Integer, primary_key=True, autoincrement=True)
    experiment_id = Column(String, unique=True)
    created_at = Column(DateTime)
    config = Column(JSON)
    metrics = Column(JSON)
    tag = Column(String, index=True)

# ==========================
# üîÑ –§—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ==========================
def init_db():
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    print("‚è≥ Initializing PostgreSQL database...")
    Base.metadata.create_all(bind=engine)
    print(f"‚úÖ Database initialized successfully (schema: {PG_SCHEMA})")


def get_db():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Å—Å–∏—é SQLAlchemy."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


if __name__ == "__main__":
    init_db()
