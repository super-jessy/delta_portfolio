import os
import time
import json
import base64
import hmac
import hashlib
import pandas as pd
from uuid import uuid4
from dotenv import load_dotenv
from websocket import create_connection
from core.database import engine

# =======================================================
# üß© –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =======================================================
load_dotenv()

FXOPEN_API_ID = os.getenv("FXOPEN_API_ID")
FXOPEN_API_KEY = os.getenv("FXOPEN_API_KEY")
FXOPEN_API_SECRET = os.getenv("FXOPEN_API_SECRET")

WS_URL = "wss://marginalttlivewebapi.fxopen.net/feed"
SYMBOLS = ["AAPL", "AMZN", "TSLA"]
TIMEFRAME = "D1"
BARS_COUNT = -500  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –Ω–∞–∑–∞–¥

# =======================================================
# üîê –°–æ–∑–¥–∞–Ω–∏–µ HMAC-–ø–æ–¥–ø–∏—Å–∏
# =======================================================
def create_signature(timestamp, api_id, api_key, secret):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Base64(HMAC_SHA256(timestamp + id + key, secret))
    """
    msg = f"{timestamp}{api_id}{api_key}"
    digest = hmac.new(secret.encode(), msg.encode(), hashlib.sha256).digest()
    return base64.b64encode(digest).decode()

# =======================================================
# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
# =======================================================
def fetch_quote_history(symbol: str, timeframe: str = "D1", count: int = -500):
    print(f"‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è {symbol}...")

    ws = create_connection(WS_URL)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª–æ–≥–∏–Ω–∞
    timestamp = int(time.time() * 1000)
    signature = create_signature(timestamp, FXOPEN_API_ID, FXOPEN_API_KEY, FXOPEN_API_SECRET)

    login_msg = {
        "Id": str(uuid4()),
        "Request": "Login",
        "Params": {
            "AuthType": "HMAC",
            "WebApiId": FXOPEN_API_ID,
            "WebApiKey": FXOPEN_API_KEY,
            "Timestamp": timestamp,
            "Signature": signature,
            "DeviceId": "DELTA_PORTFOLIO_APP",
            "AppSessionId": "DEV_001"
        }
    }

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    ws.send(json.dumps(login_msg))
    response = json.loads(ws.recv())
    if response.get("Response") != "Login" or response.get("Result", {}).get("Info") != "ok":
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", response)
        ws.close()
        return pd.DataFrame()

    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞—Ä—ã
    req_id = str(uuid4())
    history_msg = {
        "Id": req_id,
        "Request": "QuoteHistoryBars",
        "Params": {
            "Symbol": symbol,
            "Periodicity": timeframe,
            "PriceType": "bid",
            "Timestamp": int(time.time() * 1000),
            "Count": count
        }
    }

    ws.send(json.dumps(history_msg))
    data = json.loads(ws.recv())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if "Result" not in data or "Bars" not in data["Result"]:
        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {data}")
        ws.close()
        return pd.DataFrame()

    bars = data["Result"]["Bars"]
    ws.close()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
    df = pd.DataFrame(bars)
    df["datetime"] = pd.to_datetime(df["Timestamp"], unit="ms")
    df["symbol"] = symbol
    df.rename(columns={
        "Open": "open",
        "High": "high",
        "Low": "low",
        "Close": "close",
        "Volume": "volume"
    }, inplace=True)
    df = df[["symbol", "datetime", "open", "high", "low", "close", "volume"]]

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –±–∞—Ä–æ–≤ –¥–ª—è {symbol}")
    return df

# =======================================================
# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL
# =======================================================
def save_to_db(df: pd.DataFrame, table_name: str = "market_ohlc"):
    if df.empty:
        print("‚ö†Ô∏è DataFrame –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
        return
    with engine.begin() as conn:
        df.to_sql(table_name, conn, if_exists="append", index=False)
        print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –¥–ª—è {df['symbol'].iloc[0]}")

# =======================================================
# üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
# =======================================================
if __name__ == "__main__":
    all_data = []
    for sym in SYMBOLS:
        try:
            df = fetch_quote_history(sym, timeframe=TIMEFRAME, count=BARS_COUNT)
            if not df.empty:
                save_to_db(df)
                all_data.append(df)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {sym}: {e}")

    if all_data:
        total_rows = sum(len(d) for d in all_data)
        print(f"üéØ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_rows} —Å—Ç—Ä–æ–∫.")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É.")
