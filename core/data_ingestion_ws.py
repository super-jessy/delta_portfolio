import os
import time
import json
import base64
import hmac
import hashlib
import pandas as pd
from uuid import uuid4
from datetime import datetime, timedelta
from dotenv import load_dotenv
from websocket import create_connection
from sqlalchemy import create_engine, text

# =======================================================
# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =======================================================
load_dotenv()

FXOPEN_API_ID = os.getenv("FXOPEN_API_ID")
FXOPEN_API_KEY = os.getenv("FXOPEN_API_KEY")
FXOPEN_API_SECRET = os.getenv("FXOPEN_API_SECRET")

PG_HOST = os.getenv("PG_HOST")
PG_PORT = os.getenv("PG_PORT")
PG_DB = os.getenv("PG_DB")
PG_USER = os.getenv("PG_USER")
PG_PASSWORD = os.getenv("PG_PASSWORD")

DB_URL = f"postgresql+psycopg2://{PG_USER}:{PG_PASSWORD}@{PG_HOST}:{PG_PORT}/{PG_DB}"
engine = create_engine(DB_URL)

WS_URL = "wss://marginalttlivewebapi.fxopen.net/feed"

# =======================================================
# üîê –ü–æ–¥–ø–∏—Å—å HMAC
# =======================================================
def create_signature(timestamp, api_id, api_key, secret):
    msg = f"{timestamp}{api_id}{api_key}"
    digest = hmac.new(secret.encode(), msg.encode(), hashlib.sha256).digest()
    return base64.b64encode(digest).decode()

# =======================================================
# üß© –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ instruments
# =======================================================
def get_tickers_from_db():
    with engine.connect() as conn:
        result = conn.execute(text("SELECT ticker FROM instruments"))
        tickers = [row[0] for row in result]
    return tickers

# =======================================================
# üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –ø–æ —Ç–∏–∫–µ—Ä—É
# =======================================================
def get_last_datetime(ticker, timeframe):
    query = text("""
        SELECT MAX(datetime)
        FROM instrument_quotes
        WHERE ticker = :ticker AND timeframe = :tf
    """)
    with engine.connect() as conn:
        result = conn.execute(query, {"ticker": ticker, "tf": timeframe}).scalar()
    return result

# =======================================================
# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
# =======================================================
def fetch_quote_history(symbol: str, timeframe: str = "D1", since: datetime | None = None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞—Ä—ã –∏–∑ FXOpen.
    - –ï—Å–ª–∏ since=None ‚Üí –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –±–∞—Ä–æ–≤ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ, Count=-1000)
    - –ï—Å–ª–∏ since –∑–∞–¥–∞–Ω ‚Üí –¥–æ–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ –±–∞—Ä—ã –≤–ø–µ—Ä—ë–¥ –ø–æ 1000 –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é (Count=1000)
    """
    print(f"‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è {symbol} ({timeframe})...")

    all_data = []
    total_bars = 0
    iteration = 0
    next_from = since
    last_max_dt = None

    while True:
        iteration += 1
        ws = create_connection(WS_URL)
        timestamp = int(time.time() * 1000)
        signature = create_signature(timestamp, FXOPEN_API_ID, FXOPEN_API_KEY, FXOPEN_API_SECRET)

        # --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
        login_msg = {
            "Id": str(uuid4()),
            "Request": "Login",
            "Params": {
                "AuthType": "HMAC",
                "WebApiId": FXOPEN_API_ID,
                "WebApiKey": FXOPEN_API_KEY,
                "Timestamp": timestamp,
                "Signature": signature,
                "DeviceId": "DELTA_PORTFOLIO_APP",
                "AppSessionId": "AUTO_UPDATE"
            }
        }
        ws.send(json.dumps(login_msg))
        response = json.loads(ws.recv())
        if response.get("Response") != "Login" or response.get("Result", {}).get("Info") != "ok":
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", response)
            ws.close()
            break

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ---
        req_id = str(uuid4())
        params = {
            "Symbol": symbol,
            "Periodicity": timeframe,
            "PriceType": "bid",
        }

        if next_from is None:
            # –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî 1000 –±–∞—Ä–æ–≤ –Ω–∞–∑–∞–¥
            params["Count"] = -1000
            params["Timestamp"] = int(time.time() * 1000)
        else:
            # –î–æ–≥—Ä—É–∑–∫–∞ ‚Äî –ø–æ 1000 –±–∞—Ä–æ–≤ –≤–ø–µ—Ä—ë–¥
            params["Count"] = 1000
            params["From"] = int(next_from.timestamp() * 1000)

        ws.send(json.dumps({"Id": req_id, "Request": "QuoteHistoryBars", "Params": params}))
        data = json.loads(ws.recv())
        ws.close()

        bars = data.get("Result", {}).get("Bars", [])
        if not bars:
            print(f"‚öôÔ∏è FXOpen –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            break

        # --- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame ---
        df_part = pd.DataFrame(bars)
        df_part["datetime"] = pd.to_datetime(df_part["Timestamp"], unit="ms")

        # --- –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è ---
        current_max_dt = df_part["datetime"].max()
        if last_max_dt and current_max_dt <= last_max_dt:
            print(f"‚ö†Ô∏è FXOpen –≤–µ—Ä–Ω—É–ª —Ç–µ –∂–µ –±–∞—Ä—ã ({current_max_dt}), –ø—Ä–µ—Ä—ã–≤–∞–µ–º.")
            break
        last_max_dt = current_max_dt

        df_part["ticker"] = symbol
        df_part["timeframe"] = timeframe
        df_part.rename(columns={
            "Open": "open",
            "High": "high",
            "Low": "low",
            "Close": "close",
            "Volume": "volume"
        }, inplace=True)
        df_part = df_part[["ticker", "timeframe", "datetime", "open", "high", "low", "close", "volume"]]
        all_data.append(df_part)

        total_bars += len(df_part)
        print(f"‚úÖ [{iteration}] –ü–æ–ª—É—á–µ–Ω–æ {len(df_part)} –±–∞—Ä–æ–≤ ({df_part['datetime'].min()} ‚Üí {df_part['datetime'].max()})")

        # --- –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (-1000), –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 1 –∏—Ç–µ—Ä–∞—Ü–∏–∏ ---
        if since is None:
            print(f"üß© –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({len(df_part)} –±–∞—Ä–æ–≤).")
            break

        # --- –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 1000, –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏ ---
        if len(df_part) < 1000:
            print(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è <1000 –±–∞—Ä–æ–≤, –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            break

        # --- –°–ª–µ–¥—É—é—â–µ–µ –æ–∫–Ω–æ ---
        next_from = df_part["datetime"].max() + timedelta(milliseconds=1)
        time.sleep(0.5)

    if not all_data:
        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        return pd.DataFrame()

    df = pd.concat(all_data).drop_duplicates(subset="datetime").sort_values("datetime")
    print(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ {total_bars} –±–∞—Ä–æ–≤ ({iteration} –∑–∞–ø—Ä–æ—Å–æ–≤) –¥–ª—è {symbol} ({timeframe})")
    return df

# =======================================================
# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤ instrument_quotes (–±–µ–∑ –¥—É–±–ª–µ–π)
# =======================================================
def save_to_db(df: pd.DataFrame):
    if df.empty:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π DataFrame, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    ticker = df["ticker"].iloc[0]
    timeframe = df["timeframe"].iloc[0]

    with engine.begin() as conn:
        existing_dates = pd.read_sql(
            text("""
                SELECT datetime FROM instrument_quotes
                WHERE ticker = :ticker AND timeframe = :tf
            """),
            conn,
            params={"ticker": ticker, "tf": timeframe}
        )['datetime'].astype('datetime64[ns]')

        df_filtered = df[~df["datetime"].isin(existing_dates)]

        if not df_filtered.empty:
            df_filtered.to_sql("instrument_quotes", conn, if_exists="append", index=False)
            print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(df_filtered)} –Ω–æ–≤—ã—Ö –±–∞—Ä–æ–≤ –¥–ª—è {ticker} ({timeframe})")
        else:
            print(f"‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –±–∞—Ä–æ–≤ –¥–ª—è {ticker} ({timeframe}) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

# =======================================================
# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
# =======================================================
def update_quotes_if_needed(ticker, timeframe):
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {ticker} ({timeframe})")
    last_dt = get_last_datetime(ticker, timeframe)
    now = datetime.utcnow()

    refresh_period = {
        "M1": timedelta(minutes=1),
        "M5": timedelta(minutes=5),
        "M15": timedelta(minutes=15),
        "M30": timedelta(minutes=30),
        "H1": timedelta(hours=1),
        "D1": timedelta(days=1)
    }.get(timeframe, timedelta(hours=1))

    if last_dt is None:
        print(f"üÜï –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î ‚Üí –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {ticker} ({timeframe})")
        df = fetch_quote_history(ticker, timeframe=timeframe, since=None)
        if not df.empty:
            save_to_db(df)
    elif now - last_dt >= refresh_period:
        print(f"üïí –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} —Å {last_dt}")
        df = fetch_quote_history(ticker, timeframe=timeframe, since=last_dt)
        if not df.empty:
            save_to_db(df)
    else:
        print(f"‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

# =======================================================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# =======================================================
def run_auto_update(timeframe="M30"):
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫...")
    while True:
        tickers = get_tickers_from_db()
        for ticker in tickers:
            try:
                update_quotes_if_needed(ticker, timeframe)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {ticker}: {e}")
        time.sleep(60)

# =======================================================
# üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
# =======================================================
if __name__ == "__main__":
    run_auto_update(timeframe="M30")
